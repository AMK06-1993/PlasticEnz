# run_diamond.pyimport subprocessimport osimport loggingdef run_diamond(proteins, polymer, outdir, cores, evalue, min_score):    """    Perform DIAMOND BLAST search for specific polymers or multiple polymers with their databases.    Parameters:    - proteins (str): Path to the protein file (FASTA format).    - polymer (str): Polymer(s) to search for (e.g., "PET", "PBS") or "all".    - outdir (str): Directory where output files will be written.    - evalue (float): E-value threshold for DIAMOND search (default: 1e-3).    - cores (int): Number of CPU cores to use (default: 1).    Returns:    - output_files (list): List of paths to the DIAMOND output files.    """    package_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))    db_dir = os.path.join(package_dir, "data", "polymer_seqs")    polymers = polymer.split(",") if polymer != "all" else "all"    db_files = []    if polymer.strip().lower() == "all":        db_files = [os.path.join(db_dir, f) for f in os.listdir(db_dir) if f.endswith(".dmnd")]    else:        polymers = polymer.split(",")        polymer_to_diamond = {            "PBSA": ["PBSA.dmnd"], "PBS": ["PBS.dmnd"],            "PCL": ["PCL.dmnd"], "PES": ["PES.dmnd"],            "PHBV": ["PHBV.dmnd"], "PLA": ["PLA.dmnd"],            "PVA": ["PVA.dmnd"]        }        for poly in polymers:            poly = poly.strip().upper()            if poly in polymer_to_diamond:                for db in polymer_to_diamond[poly]:                    db_path = os.path.join(db_dir, db)                    if os.path.exists(db_path):                        db_files.append(db_path)    if not db_files:        print("No supported polymers provided. Skipping DIAMOND search.")        return []    os.makedirs(outdir, exist_ok=True)    output_files = []    for db_file in db_files:        base_name = os.path.basename(proteins).split('_')[0]        db_base = os.path.splitext(os.path.basename(db_file))[0]        output_file = os.path.join(outdir, f"{base_name}_{db_base}_DIAMOND.tsv")        log_file = os.path.join(outdir, "diamond.log")        # Updated DIAMOND command        cmd = [            "diamond", "blastp",            "-d", db_file,            "-q", proteins,            "-o", output_file,            "--outfmt", "6",            "-e", str(evalue),            "--min-score", str(min_score),            "--threads", str(cores),        ]        if os.path.exists(log_file):            os.remove(log_file)                try:            with open(log_file, "a") as log:                log.write(f"Running command: {' '.join(cmd)}\n")                subprocess.check_call(cmd, stdout=log, stderr=log)            output_files.append(output_file)        except subprocess.CalledProcessError as e:            with open(log_file, "a") as log:                log.write(f"Error running DIAMOND command: {e}\n")    print(f"DIAMOND completed successfully for polymer(s): {polymer}.")    return output_files