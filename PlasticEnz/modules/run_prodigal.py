import subprocessimport osimport csvdef rename_contigs(input_fasta, output_fasta, mapping_csv):    """    Rename contig headers in a FASTA file and save the mapping to a CSV file.    Parameters:    - input_fasta: Path to the input FASTA file.    - output_fasta: Path to the output FASTA file with renamed headers.    - mapping_csv: Path to the CSV file to store header mappings.    Returns:    - None    """    mapping = []    with open(input_fasta, "r") as infile, open(output_fasta, "w") as outfile:        current_id = 1        for line in infile:            if line.startswith(">"):  # Header line                original_header = line.strip()                new_header = f">contig_{current_id}"                mapping.append((original_header, new_header))                outfile.write(new_header + "\n")                current_id += 1            else:  # Sequence line                outfile.write(line)    # Write mapping to CSV    with open(mapping_csv, "w", newline="") as csvfile:        writer = csv.writer(csvfile)        writer.writerow(["Original Header", "New Header"])        writer.writerows(mapping)def run_prodigal(input_file, outdir, cores=1, is_genome=False):    base_name = os.path.basename(input_file).split('.')[0]    protein_out = os.path.join(outdir, f"{base_name}_proteins.fa")    gene_out = os.path.join(outdir, f"{base_name}_genes.fna")    log_file = os.path.join(outdir, f"{base_name}_prodigal.log")    if not is_genome:        renamed_contigs = os.path.join(outdir, f"{base_name}_renamed_contigs.fasta")        mapping_csv = os.path.join(outdir, f"{base_name}_header_mapping.csv")        rename_contigs(input_file, renamed_contigs, mapping_csv)        input_file = renamed_contigs    prodigal_mode = "single" if is_genome else "meta"    cmd = [        "prodigal",        "-i", input_file,        "-a", protein_out,        "-d", gene_out,        "-p", prodigal_mode,    ]    os.makedirs(outdir, exist_ok=True)    with open(log_file, "w") as log:        subprocess.check_call(cmd, stdout=log, stderr=log)    print("Prodigal completed successfully!")    return protein_out, gene_out, None if is_genome else mapping_csv