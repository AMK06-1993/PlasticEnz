import osimport subprocessimport sysfrom Bio import SearchIO, SeqIOimport timeimport threadingfrom utilities import check_dependencies,spinning_cursor_taskerror2=""" __ __  __  __  __  |_ |__)|__)/  \|__) |__| \ | \ \__/| \                                       """def check_args(args):    if args.contigs is None and args.orf_file is None:        error = "\nError: Both contigs and ORF file path are not specified.\n"        error += "You must provide either the --contigs or the --orf_file argument.\n"        print(error2)        print(error)        sys.exit(1)    if args.contigs is None and args.orf_file:        pass  # do nothing    if args.contigs and args.orf_file is None:        pass  # do nothing    if args.plastic is None:        error = "\nError: No plastic type specified\n"        error += "Use the flag --plastic to specify a plastic type.\n"        print(error2)        print(error)        sys.exit(1)def fetch_motifs():    global motif_dir, bitscores_file    motif_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "motifs")    if not os.path.exists(motif_dir):        error = f"\nError: No motif directory at {motif_dir} found\n"        print(error2)        sys.exit(error)    bitscores_file = os.path.join(motif_dir, 'bitscores.txt')    if not os.path.exists(bitscores_file):        error = f"\nError: No bitscores.txt file found in {motif_dir}\n"        print(error2)        sys.exit(error)    def translate_search(args):    check_dependencies(["hmmsearch","prodigal"])    check_args(args)    fetch_motifs()    contigs_file = args.contigs    plastic_names = args.plastic        if isinstance(plastic_names, str) and plastic_names.lower() != "all":        plastic_names = plastic_names.split(',')    elif isinstance(plastic_names, str) and plastic_names.lower() == "all":        plastic_names = [os.path.splitext(file)[0] for file in os.listdir(motif_dir) if file.endswith('.hmm')]    temp_dir = os.path.join(os.path.abspath(args.output), "temps")    os.makedirs(temp_dir, exist_ok=True)    for plastic_name in plastic_names:        plastic_name = plastic_name.lower()                incT = None        with open(bitscores_file) as f:            for line in f:                if plastic_name in line.lower():                    incT = float(line.split(":")[1].strip())                    break        if incT is None:            print(error2)            sys.exit(f"\n ERROR: No bitscore found for specified plastic type: {plastic_name} in {plastic_names}\n")        if args.orf_file:           orf_file = args.orf_file           if not os.path.exists(orf_file):               print(error2)               print(f"\nError: Provided ORF file {orf_file} does not exist. Exiting.")               sys.exit(1)        else:           orf_file = os.path.join(temp_dir, f"{os.path.basename(contigs_file)}_ORFs.faa")           prodigal_command = f"prodigal -i {contigs_file} -a {orf_file} -p meta"           print("\u001b[1m" + "\nâ€¢ Running prodigal for ORFs detection..." + "\u001b[0m")           subprocess.run(prodigal_command, shell=True)                hmm_input = os.path.join(motif_dir, f"{plastic_name}.hmm")        hmm_output = os.path.join(temp_dir, f"{plastic_name}_HMMER.out")        hmmer_command = f"hmmsearch --tformat fasta --incT {incT} --tblout {hmm_output} {hmm_input} {orf_file}"        log_file = os.path.join(temp_dir, f"{plastic_name}_hmmsearch.log")                task_done = threading.Event()                with open(log_file, 'w') as f:            process = subprocess.Popen(hmmer_command, shell=True, stdout=f, stderr=subprocess.STDOUT)                t = threading.Thread(target=spinning_cursor_task, args=(task_done,'hmmsearch'))        t.start()        while process.poll() is None:            time.sleep(0.1)        task_done.set()        t.join()                print("\nhmmsearch finished running. Results saved to {}".format(hmm_output))        print("hmmsearch logs saved to {}".format(log_file))                qresults = SearchIO.read(hmm_output, "hmmer3-tab")        hits = [result.id for result in qresults]                records = list(SeqIO.parse(orf_file, "fasta"))        output = os.path.join(temp_dir, f"{plastic_name}_hmm_output.fasta")                if os.path.exists(output):            os.remove(output)                for record in records:            if record.id in hits and len(record) > 10:                with open(output, "a") as f:                    f.write(">" + str(record.id) + "\n" + str(record.seq) + "\n")