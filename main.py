import argparseimport sysfrom database_operations import database_fetchfrom hmm_operations import hmm_fetchfrom translate_search import translate_searchfrom quantify_hmm import quantify_hmm# ASCII Logologo = """   ___ _           _   _        __            / _ | | __ _ ___| |_(_) ___  /___ __  ____ / /_)| |/ _` / __| __| |/ __|/_\| '_ \|_  // ___/| | (_| \__ | |_| | (__//__| | | |/ / \/    |_|\__,_|___/\__|_|\___\__/|_| |_/___|                                            """print(logo)# Create the parserparser = argparse.ArgumentParser(prog='PlasticEnz Tool', add_help=False)required = parser.add_argument_group('required arguments')optional = parser.add_argument_group('optional arguments')required.add_argument('--output', required=True, help='Provide the output directory where all temporary files and outputs will be saved')group = required.add_mutually_exclusive_group(required=True)group2 = required.add_mutually_exclusive_group(required=True)group.add_argument('--contigs', help='Provide contigs file path')group.add_argument('--orf_file', help='Provide ORF file path to skip Prodigal ORF detection')required.add_argument('--plastic', required=True, help='Provide type of plastic searched (PLA,PET,nylon...)')group2.add_argument('--gene_counts_file', help='Provide reads to assembly mappings (output of idxstat from samtools)')group2.add_argument('--bams', help='Provide path to bams (generated by samtools)')# Add the help argument back inoptional.add_argument('-h', '--help', action='help', default=argparse.SUPPRESS,                      help='Show this help message and exit')# Create subparsers for the "database-fetch" and "hmm-fetch" commandssubparsers = parser.add_subparsers(dest='command')database_fetch_parser = subparsers.add_parser('database-fetch', help="Fetches data from the database")hmm_fetch_parser = subparsers.add_parser('hmm-fetch', help="Fetches HMM for plastics")# Parse the command-line argumentsargs = parser.parse_args()# Check which command was specified and call the respective functionif args.command == 'database-fetch':    plastic_type = input("Enter the plastic type: ")    info_type = input("Enter the info type: ")    database_fetch(plastic_type, info_type, args.output)elif args.command == 'hmm-fetch':    hmm_fetch(args.output)else:    print('Running translate_search...')    translate_search(args)    print('Running quantify_hmm...')    quantify_hmm(args)